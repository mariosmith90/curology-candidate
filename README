# Hello World Web Application with AWS and Terraform

This repository contains an Infrastructure-as-Code (IaC) solution for deploying a scalable "Hello World" web application using AWS, Docker, and Terraform. The application is containerized with Flask and connected to a PostgreSQL database hosted on AWS RDS.

## Table of Contents
1. Architecture Overview
2. Prerequisites
3. Setup
4. Deployment
5. Monitoring
6. Load Testing
7. Additional Notes

---

## Architecture Overview

- **Infrastructure**: Managed using Terraform. The key components include:
  - **Amazon ECS** (Fargate) for container orchestration.
  - **Amazon RDS** (PostgreSQL) for database management.
  - **Amazon CloudWatch** for logging and monitoring.
  - **VPC** with public and private subnets for resource segregation.
  - **AWS Secrets Manager** for securely managing sensitive information (e.g., DB passwords).

- **Application**: A simple Flask web application that connects to an RDS PostgreSQL database and returns "Hello World" from a SQL query.

---

## Prerequisites

- AWS CLI configured with proper access credentials.
- Terraform installed and configured.
- Docker and Docker Compose installed.
- Terraform state management bucket in S3.

---

## Setup

1. Clone the repository:
    ```bash
    git clone https://github.com/your-repo/hello-world-app.git
    cd hello-world-app
    ```

2. Set up AWS resources using Terraform:
    ```bash
    terraform init
    terraform apply -var revision=v1.0 --var-file=dev.tfvars
    ```

3. Build Docker images locally for ARM64 architecture:
    ```bash
    docker buildx build --platform linux/arm64 -f Dockerfile -t dev-hello-world .
    ```

4. Use Docker Compose for local development:
    ```bash
    docker-compose build --no-cache
    docker-compose up
    ```

---

## Deployment

### AWS ECS
1. The infrastructure for deploying this application is built using Terraform. The main components are:
    - ECS cluster and Fargate service for hosting the containerized application.
    - RDS PostgreSQL for database services.
    - Secrets Manager for secure database credentials.

2. Key Terraform command:
    ```bash
    terraform apply -var revision=v1.0 --var-file=dev.tfvars
    ```

---

## Monitoring

- **CloudWatch**: ECS logs are sent to AWS CloudWatch for monitoring. Container Insights are enabled to track CPU and memory utilization.
  
- Metrics monitored:
  - **ECSServiceAverageCPUUtilization**: Tracks the average CPU utilization of the ECS service.
  - **ECSServiceAverageMemoryUtilization**: Tracks the average memory usage of the ECS service.
  
This allows for proactive autoscaling based on real-time usage.

---

## Load Testing

This repository includes a basic load testing configuration. The test simulates high traffic for 50 minutes to ensure the application is capable of handling large-scale growth.

1. Update the `target` in the load testing configuration to your application's public IP or DNS.
2. Run the load test:
    ```yaml
    target: "http://your-app-url:3000"
    phases:
      - duration: 3000
        arrivalRate: 100
        rampTo: 500
    ```

---

## Additional Notes

- **Security**: Secrets for the database are stored in AWS Secrets Manager for enhanced security. IAM roles and policies are in place to control access to resources.
- **Future Enhancements**:
  - Implementing ALB (Application Load Balancer) for better traffic distribution.
  - Private subnets for database instances for enhanced security.
